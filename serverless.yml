service: store-products
frameworkVersion: '3'

plugins:
  - serverless-offline
  # - serverless-python-requirements

useDotenv: true

package:
  patterns:
    - "!./**"
    - "handlers/**"
    - "Classes/**"
    - "Models/**"

custom:
  globalTimeOut: 30

  cors:
    origin: "*"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Headers
      - Accept
      - Accept-Language
      - Content-Language
      - Access-Control-Allow-Origin
      - Access-Control-Allow-Methods
      - Access-Control-Allow-Credentials

  pythonRequirements:
    fileName: requirements.txt
    layer: true
    slim: true
    strip: false
    slimPatternsAppendDefaults: false
    slimPatterns:
      - boto3/**
      - botocore/**
      - s3transfer/**
      - urllib3/**
      - mysql/vendor/**
      - '*/.py[c|o]'
      - '*/_pycache_'

provider:
  name: aws
  runtime: python3.9
  layers:
    - Ref: PythonRequirementsLambdaLayer
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:GetUser
      Resource: "*"

functions:
  ProductsAPI:
    name: Products-Api
    handler: handlers/ProductsHandler.products
    events:
      - http:
          path: /products
          method: post
          cors: ${self:custom.cors}
      - http:
          path: /products
          method: get
          cors: ${self:custom.cors}
      # - http:
      #     path: /products
      #     method: put
      #     cors: ${self:custom.cors}

  TypesProductsAPI:
    name: Types-Products-Api
    handler: handlers/ProductsHandler.types_products
    events:
      - http:
          path: /types_products
          method: post
          cors: ${self:custom.cors}
      - http:
          path: /types_products
          method: get
          cors: ${self:custom.cors}
